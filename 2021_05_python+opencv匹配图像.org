#+title: 使用opencv匹配图像
#+startup: content
#+author: Gaeric
#+HTML_HEAD: <link href="./worg.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <link href="/static/css/worg.css" rel="stylesheet" type="text/css">
#+OPTIONS: ^:{}
* 简介
  做一个业余项目，其中使用的皮肤是从原图是抠取出来的；因为资源来源于网络，所以拿到图的时候没有对应关系，现在需要对这些内容生成对应关系。靠人眼来筛查实在太无聊了些，而且工作量较大，于是我从网上找到了opencv的模板匹配和特征匹配
* opencv的特征匹配
  #+begin_src python
    def match_image(seat, origin):
        origin_img = cv2.imread(origin, 0)
        seat_img = cv2.imread(seat, 0)

        sift = cv2.SIFT_create()
        origin_kp, origin_des = sift.detectAndCompute(origin_img, None)
        seat_kp, seat_des = sift.detectAndCompute(seat_img, None)

        FLANN_INDEX_KDTREE = 0
        index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
        search_params = dict(checks=50)
        flann = cv2.FlannBasedMatcher(index_params, search_params)
        matches = flann.knnMatch(origin_des, seat_des, k=2)
        good = []
        for m, n in matches:
            if m.distance < 0.7 * n.distance:
                good.append(m)
        if len(good) > MIN_MATCH_COUNT:
            print('Image Matched')
            return True
        else:
            print('Image Not Matched')
            return False
  #+end_src
  使用cv2中的SIFT算法，对两个图像分别计算特征点和描述子，如果两组图像相似的特征点超过50个，则视其为相匹配的图片

* 参考资料
  https://opencv.apachecn.org/#/docs/4.0.0/5.4-tutorial_py_sift_intro
