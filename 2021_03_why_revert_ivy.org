#+title: Emacs补全框架回退至ivy
#+startup: content
#+author: Gaeric
#+OPTIONS: ^:{}
* 简介
  在一段时间前，我将补全框架从~ivy~ 切换到了~selectrum + presicent + consult + embark~，现在我重新换回了ivy，在这里我试图说明我这么做的理由，如果下一次我仍选择切换框架，至少应当提醒自己先看一下本文。

  先说些废话：可靠性、效率是我评估插件的两个维度；使用Emacs本质上是为了从高度定制化的工作流中，获取更高的效率；对于一份高度定制化的工作流，可靠性极其重要 -- 任何情况下都可用、高效的工作
* 为什么换掉ivy
  为什么换掉ivy其实是一个很复杂的决定，促使我切换的原因其实大概如下：

  1. 可靠性-可维护性：尽量使用emacs的内置模块，因为内置模块是随着emacs的发展而发展的，它会始终走在和emacs自身相匹配的道路上；
     selectrum说了很重要的一点，ivy使用自身的补全框架，然后试图去重写每一个emacs原生的命令；

  2. 可靠性-稳定性：emacs中的内置模块在任何场景下都能使用，而且它的接口有兼容性保证；

  证据并不充分，因为实际上我在使用的过程中并没有发现~ivy~的什么不足，相反它给的糖都挺香
* 为什么换回ivy
  1. 效率-可用性：搜索结果 -> 多次筛选 -> 导出occur 是一个非常常用的工作流，consult-*与embark配合后体验着实一般（ivy-occur有一些特殊的定制）
  2. 效率-可用性：embark重朔了occur的概念，但是xref的导出不可用
  3. 可靠性-稳定性：consult和embark都是外部工具，但与ivy相比并不那么成熟
  4. 可靠性-易用性：selectrum需要presicent配合，但是presicent记录了所有在selectrum中选择的记录，在~find-file~这种类型的操作中对我非常不友好；相比之下amx只记录了command，recentf记录了buffer记录，这两个常用，且功能刚刚好
* 结论
  在本次切换的过程中，我还尝试了诸如icomplete、ido等内部工具，但是结果都不尽如人意；鉴于我在ivy上的历史积累，且ivy本身并没有特别的问题，我决定回退到ivy
