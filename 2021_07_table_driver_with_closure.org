#+title: 闭包与表驱动
#+startup: content
#+author: Gaeric
#+HTML_HEAD: <link href="./worg.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <link href="/static/css/worg.css" rel="stylesheet" type="text/css">
#+OPTIONS: ^:{}
* 简介
  本篇记录在rust中将闭包组成序列，然后随机选择的一个例子
* 问题
  在娱乐zemeroth的过程中，我想为角色healer的技能Heal增加一些趣味性，于是我试图让Heal在发动时，增强目标角色的属性；

  从代码而言，就是函数执行时，随机将agent的某个属性值加1;

  传统思路是这样的：生成一个范围类的随机值，然后根据生成的随机值，去执行增加对应属性能力的操作；
  #+begin_src rust
    fn extra_reward(agent: &mut Agent) {
        match quad_rand::gen_range(0u8, 4u8) {
            0 => agent.attack_accuracy.0 += 1,
            1 => agent.reactive_attacks.0 += 1,
            2 => agent.move_points.0 += 1,
            3 => agent.attack_strength.0 += 1,
            4 => agent.base_moves.0 += 1,
            _ => (),
        }
    }
  #+end_src

  上面这个函数完整的实现了功能，但是这种写法存在优化的空间；

  这里都是对agent的修改，中间没有其它步骤，完全可以全部写成闭包；然后拼成一个vec，之后再随机生成值时，只需要从向量之中随机取出一个即可；相比于此处生成随机数的写法，写成闭包序列然后随机取值的维护负担要更轻；因为生成随机数并匹配随机数的生成值，这是需要人为额外保证的；
* closure写法
  闭包向量的写法如下：
  #+begin_src rust
    fn get_extra_reward(agent: &mut Agent) {
        let extra_rewards: Vec<Box<dyn Fn(&mut Agent) -> ()>> = vec![
            Box::new(|agent: &mut Agent| agent.attack_accuracy.0 += 1),
            Box::new(|agent: &mut Agent| agent.reactive_attacks.0 += 1),
            Box::new(|agent: &mut Agent| agent.move_points.0 += 1),
            Box::new(|agent: &mut Agent| agent.attack_strength.0 += 1),
            Box::new(|agent: &mut Agent| agent.base_moves.0 += 1),
        ];

        let mut rng = thread_rng();
        let special_reward = extra_rewards.choose(&mut rng).unwrap();
        special_reward(agent);
    }
  #+end_src
  
* Note
  1. 这种写法做为例子用于发散，展示闭包和序列结合时的实用技巧
  
